# -*- coding: utf-8 -*-
"""Laptop Price Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fErH6mwcjTdW8xo1fQxdA1uz_KxF7a48
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

lap_data = pd.read_csv('E:\Kaggle DataSets\Laptop Price\laptop_data.csv')

lap_data.head()

lap_data.shape

lap_data.info()

lap_data.duplicated().sum()

lap_data.drop(columns = 'Unnamed: 0', inplace=True)

lap_data["Ram"] = lap_data['Ram'].str.replace("GB", '')
lap_data["Weight"] =lap_data["Weight"].str.replace("kg", '')

lap_data.head()

lap_data["Ram"]= lap_data["Ram"].astype(int)
lap_data["Weight"] = lap_data["Weight"].astype("float")

lap_data.info()

import seaborn as sns

sns.displot(lap_data['Price'])

lap_data['Company'].value_counts().plot(kind='bar')

#Company vs Price
sns.barplot(x = lap_data["Company"], y=lap_data["Price"])
plt.xticks(rotation = 'vertical')
plt.show()

lap_data['TypeName'].value_counts()

lap_data["TypeName"].value_counts().plot(kind="bar")

# Type vs Price
sns.barplot(x=lap_data["TypeName"], y=lap_data["Price"])
plt.xticks(rotation = "vertical")
plt.show()

lap_data.sample()

lap_data["Inches"].value_counts().plot(kind="bar")

# Inches vs Price
sns.barplot(x = lap_data["Inches"], y=lap_data["Price"])
plt.xticks(rotation="vertical")
plt.show()

lap_data["Ram"].value_counts()

sns.barplot(x = lap_data["Ram"], y = lap_data["Price"])
plt.xticks(rotation = "vertical")
plt.show()

lap_data["Memory"].value_counts()

lap_data["ScreenResolution"].value_counts()

lap_data["Touchscreen"] = lap_data["ScreenResolution"].apply(lambda x:1 if "Touchscreen" in x else 0)

lap_data.sample(5)

sns.barplot(x=lap_data["Touchscreen"], y=lap_data["Price"])

lap_data["Ips"] = lap_data["ScreenResolution"].apply(lambda x:1 if "IPS" in x else 0)

lap_data.sample(5)

# IPS vs Price
sns.barplot(x=lap_data["Ips"], y=lap_data["Price"])

res = lap_data["ScreenResolution"].str.split('x',  expand=True)

print(res)

lap_data["X_res"] = res[0]
lap_data["Y_res"] = res[1]

lap_data.head()

lap_data['X_res'] = lap_data['X_res'].str.replace(',', '').str.findall(r'(\d+\.?\d+)').apply(lambda x:x[0])

lap_data.head()

lap_data['X_res'] = lap_data['X_res'].astype(int)
lap_data['Y_res'] = lap_data['Y_res'].astype(int)

lap_data.info()

lap_data.corr()['Price']

# ppi = root(x_res^2 + y_res^2)
lap_data['ppi'] = (lap_data['X_res']**2 + lap_data['Y_res']**2)**0.5

lap_data.head()

lap_data.drop(columns = ["X_res", "Y_res"], inplace=True)

lap_data.drop(columns = ["ScreenResolution"], inplace=True)

lap_data.head()

lap_data.drop(columns = ["Inches"], inplace=True)

lap_data['Cpu'].value_counts()

lap_data["cpu_name"] = lap_data["Cpu"].apply(lambda x:" ".join(x.split()[0:3]))

lap_data.head()

def fetch_processor(text):
  if text in ['Intel Core i7', 'Intel Core i5','Intel Core i3']:
    return text
  else :
    if text.split()[0] == "Intel":
      return "Other Intel Processor"
    else :
      return "AMD Processor"

lap_data['cpu brand'] = lap_data['cpu_name'].apply(fetch_processor)

lap_data.head()

lap_data['cpu brand'].value_counts()

# cpu brand vs price
sns.barplot(x=lap_data['cpu brand'], y=lap_data['Price'])
plt.xticks(rotation='vertical')
plt.show()

lap_data.drop(columns = ["Cpu", 'cpu_name'], inplace=True)

lap_data.head()

lap_data['Memory'] = lap_data['Memory'].astype(str).replace('\.0', '', regex=True)
lap_data["Memory"] = lap_data["Memory"].str.replace('GB', '')
lap_data["Memory"] = lap_data["Memory"].str.replace('TB', '000')
new = lap_data["Memory"].str.split("+", n = 1, expand = True)

lap_data["first"]= new[0]
lap_data["first"]=lap_data["first"].str.strip()

lap_data["second"]= new[1]

lap_data["Layer1HDD"] = lap_data["first"].apply(lambda x: 1 if "HDD" in x else 0)
lap_data["Layer1SSD"] = lap_data["first"].apply(lambda x: 1 if "SSD" in x else 0)
lap_data["Layer1Hybrid"] = lap_data["first"].apply(lambda x: 1 if "Hybrid" in x else 0)
lap_data["Layer1Flash_Storage"] = lap_data["first"].apply(lambda x: 1 if "Flash Storage" in x else 0)

lap_data['first'] = lap_data['first'].str.replace(r'\D', '')

lap_data["second"].fillna("0", inplace = True)

lap_data["Layer2HDD"] = lap_data["second"].apply(lambda x: 1 if "HDD" in x else 0)
lap_data["Layer2SSD"] = lap_data["second"].apply(lambda x: 1 if "SSD" in x else 0)
lap_data["Layer2Hybrid"] = lap_data["second"].apply(lambda x: 1 if "Hybrid" in x else 0)
lap_data["Layer2Flash_Storage"] = lap_data["second"].apply(lambda x: 1 if "Flash Storage" in x else 0)

lap_data['second'] = lap_data['second'].str.replace(r'\D', '')

lap_data["first"] = lap_data["first"].astype(int)
lap_data["second"] = lap_data["second"].astype(int)

lap_data["HDD"]=(lap_data["first"]*lap_data["Layer1HDD"]+lap_data["second"]*lap_data["Layer2HDD"])
lap_data["SSD"]=(lap_data["first"]*lap_data["Layer1SSD"]+lap_data["second"]*lap_data["Layer2SSD"])
lap_data["Hybrid"]=(lap_data["first"]*lap_data["Layer1Hybrid"]+lap_data["second"]*lap_data["Layer2Hybrid"])
lap_data["Flash_Storage"]=(lap_data["first"]*lap_data["Layer1Flash_Storage"]+lap_data["second"]*lap_data["Layer2Flash_Storage"])

lap_data.drop(columns=['first', 'second', 'Layer1HDD', 'Layer1SSD', 'Layer1Hybrid',
       'Layer1Flash_Storage', 'Layer2HDD', 'Layer2SSD', 'Layer2Hybrid',
       'Layer2Flash_Storage'],inplace=True)

lap_data.head()

sns.barplot(x=lap_data['HDD'], y=lap_data["Price"])

lap_data.corr()["Price"]

lap_data.drop(columns = ["Hybrid", "Flash_Storage", "Memory"], inplace = True)

lap_data.head()

lap_data["Gpu"].value_counts()

lap_data['Gpu brand'] =lap_data['Gpu'].apply(lambda x:x.split()[0])

lap_data['Gpu brand'].value_counts()

lap_data = lap_data[lap_data["Gpu brand"] != 'ARM']

lap_data["Gpu brand"].value_counts()

sns.barplot(x=lap_data["Gpu brand"], y=lap_data["Price"])

lap_data.drop(columns = "Gpu", inplace=True)

lap_data.head()

lap_data["OpSys"].value_counts()

def cat_os(inp):
    if inp == 'Windows 10' or inp == 'Windows 7' or inp == 'Windows 10 S':
        return 'Windows'
    elif inp == 'macOS' or inp == 'Mac OS X':
        return 'Mac'
    else:
        return 'Others/No OS/Linux'

lap_data['os'] = lap_data["OpSys"].apply(cat_os)

lap_data.head()

lap_data.drop(columns = 'OpSys', inplace=True)

sns.barplot(x=lap_data["os"], y=lap_data["Price"])

sns.displot(lap_data["Weight"])

sns.scatterplot(x=lap_data["Weight"], y=lap_data["Price"])

lap_data.corr()["Price"]

lap_data.corr()

sns.heatmap(lap_data.corr())

sns.displot(np.log(lap_data["Price"]))

X = lap_data.drop(columns="Price")
y = np.log(lap_data["Price"])

from pandas.core.common import random_state
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.15, random_state=2)

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import r2_score,mean_absolute_error

from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor,ExtraTreesRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor

lap_data.sample()
'''
"""**Linear Regression**"""

step1 = ColumnTransformer(transformers = [
    ('col_tnf', OneHotEncoder(sparse=False, drop='first'), [0,1,7,10,11])
], remainder='passthrough')

step2 = LinearRegression()

pipe = Pipeline([
    ('step1', step1),
    ('step2', step2)  
])

pipe.fit(X_train, y_train)

y_pred = pipe.predict(X_test)

print("R2 Score : ", r2_score(y_test, y_pred))
print("MAE : ", mean_absolute_error(y_test, y_pred))

"""**Lasso Regression**"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf', OneHotEncoder(sparse=False, drop='first'), [0,1,7,10,11])
],remainder='passthrough')

step2 = Lasso(alpha=0.001)

pipe = Pipeline([
    ('step1', step1),
    ('step2', step2)
])

pipe.fit(X_train, y_train)

y_pred = pipe.predict(X_test)

print("R2 score", r2_score(y_test, y_pred))
print("MAE", mean_absolute_error(y_test, y_pred))

"""Ridge Regression"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = Ridge(alpha=10)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""KNN"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = KNeighborsRegressor(n_neighbors=3)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""Decision Tree"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = DecisionTreeRegressor(max_depth=10)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""**SVM**"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = SVR(kernel='rbf',C=10000,epsilon=0.1)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""Random Forest"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = RandomForestRegressor(n_estimators=100,
                              random_state=3,
                              max_samples=0.5,
                              max_features=0.75,
                              max_depth=15)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""**ExtraTrees**"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = ExtraTreesRegressor(n_estimators=100,
                              random_state=3,
                              max_samples=None,
                              max_features=0.75,
                              max_depth=15)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""**AdaBoost**"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = AdaBoostRegressor(n_estimators=15,learning_rate=1.0)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""Gradient Boost"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = GradientBoostingRegressor(n_estimators=500)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))

"""XgBoost"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = XGBRegressor(n_estimators=45,max_depth=5,learning_rate=0.5)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))



"""Exporting the Model"""

from sklearn.ensemble import VotingRegressor,StackingRegressor

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')


rf = RandomForestRegressor(n_estimators=350,random_state=3,max_samples=None,max_features=0.75,max_depth=15)
gbdt = GradientBoostingRegressor(n_estimators=100,max_features=0.5)
xgb = XGBRegressor(n_estimators=25,learning_rate=0.3,max_depth=5)
et = ExtraTreesRegressor(n_estimators=100,random_state=3,max_samples=None,max_features=0.75,max_depth=10)

step2 = VotingRegressor([('rf', rf), ('gbdt', gbdt), ('xgb',xgb), ('et',et)],weights=[5,1,1,1])

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))


'''






"""Random Forest"""

step1 = ColumnTransformer(transformers=[
    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])
],remainder='passthrough')

step2 = RandomForestRegressor(n_estimators=100,
                              random_state=3,
                              max_samples=0.5,
                              max_features=0.75,
                              max_depth=15)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

print('R2 score',r2_score(y_test,y_pred))
print('MAE',mean_absolute_error(y_test,y_pred))


import pickle

pickle.dump(lap_data, open('lap_data.pkl', 'wb'))
pickle.dump(pipe, open('pipe.pkl', 'wb'))


lap_data

X_train